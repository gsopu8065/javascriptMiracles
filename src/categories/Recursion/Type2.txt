BackTracking

1. Subset, Combinations and permutations:
Draw a tree diagram
https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)

Time complexity:
subsets: (2^N)
combinations: N!​/(N−k)!k!
permutations: N!


Subsets: https://leetcode.com/problems/subsets/ (2^N)
Subsets With Duplicates: https://leetcode.com/problems/subsets-ii/ (2^N)
Letter Case: https://leetcode.com/problems/letter-case-permutation

Combinations: https://leetcode.com/problems/combinations/
Combinations Sum (use candidates once) : https://leetcode.com/problems/combination-sum-ii/
Combinations Sum (use candidates repeatedly) : https://leetcode.com/problems/combination-sum
Combinations Sum (use candidates once but no array)https://leetcode.com/problems/combination-sum-iii
Combinations with length: https://leetcode.com/problems/iterator-for-combination

Permutations in array: https://leetcode.com/problems/permutations/
Permutations in duplicates: https://leetcode.com/problems/permutations-ii/
String Permutaions: same as int[] permutations
Palindrome Permutations: https://leetcode.com/problems/palindrome-permutation-ii [form strings from char counts]

2. Word Search: [DFS without visitors, mark board with '#' after visited]
https://leetcode.com/problems/word-search

3. Word Break: [Dynamic Programming with n+1 boolean flags]
https://leetcode.com/problems/word-break/
https://leetcode.com/problems/word-break-ii [Approach2 with recursion to get all breaks DFS]
https://leetcode.com/problems/palindrome-partitioning [same as word break II]
https://leetcode.com/problems/restore-ip-addresses [Same as word break II]
https://leetcode.com/problems/palindrome-partitioning-ii [DFS with cache]

4. Word Ladder:
https://leetcode.com/problems/word-ladder/
  [https://leetcode.com/problems/word-ladder/discuss/468050/DFS-but-not-the-way-to-get-it-passed]
https://leetcode.com/problems/word-ladder-ii/

5. N-Queues:
https://leetcode.com/problems/n-queens [same as word break II, Formula for diagonal]
https://leetcode.com/problems/n-queens-ii/
https://leetcode.com/problems/sudoku-solver [Return boolean to stop when its solved]

6. Android unlock Problem:
https://leetcode.com/problems/android-unlock-patterns [same as word break II, Store jumps in an array]

https://leetcode.com/problems/remove-invalid-parentheses